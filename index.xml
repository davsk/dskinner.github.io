<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>All Things Related</title>
    <link>http://blog.dasa.cc/</link>
    <description>Recent content on All Things Related</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Jan 2015 03:09:00 -0400</lastBuildDate>
    <atom:link href="http://blog.dasa.cc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing Boring Code</title>
      <link>http://blog.dasa.cc/post/writing-boring-code/</link>
      <pubDate>Sat, 10 Jan 2015 03:09:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/writing-boring-code/</guid>
      <description>&lt;p&gt;I have bad news. Using Go as a shared library on Android 5.0 is simply not a good idea. In fact, it&amp;rsquo;s a horrible idea. Android 5.0 introduced a new runtime called ART. This replaces JIT compilation (Just-In-Time compilation).&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know, a JIT analyzes runtime heuristics and modifies the compiled program to run faster. JIT is one of the reasons you might see javascript outperforming C code on the DNA regex benchmark that&amp;rsquo;s been floating around for years.&lt;/p&gt;

&lt;p&gt;ART actually precompiles dalvik bytecode to native code and runs that native code in its runtime. As a refresher, when you write java code for android, the java code gets compiled to java bytecode and then gets transpiled to dalvik bytecode to run on the dalvik virtual machine (so no one has to pay oracle any cash).&lt;/p&gt;

&lt;p&gt;Tangent, there&amp;rsquo;s a new experimental compiler for android studio (based on intellij) that compiles java 7.x source directly to dalvik bytecode.&lt;/p&gt;

&lt;p&gt;But, the ART runtime is much like the Go runtime, and the two fight over things. For the most part, it works and works well. But, when you begin trying to load native code such as PublisherAdView for ads that load in chromium webview that loads native code, bad things seem to happen.&lt;/p&gt;

&lt;p&gt;It is essentially a no-go. For pure Go projects as is the initial target, this is a non-issue. But, for integrating Go into a normal Java app, this is a huge blocker. I&amp;rsquo;ve given up on using Go for normal apps.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve actually stopped using Scala as well. I like Scala, and programming in a functional language (i.e. Lisp like) has really taught me a few things I appreciate greatly. There just hasn&amp;rsquo;t been much uptake from the other android developer on our team. He&amp;rsquo;s much older than me, in his 60&amp;rsquo;s. He doesn&amp;rsquo;t have anything bad to say, he just doesn&amp;rsquo;t pursue it or have much interest.&lt;/p&gt;

&lt;p&gt;I really can&amp;rsquo;t blame him. It&amp;rsquo;s not just Scala, it&amp;rsquo;s anything that becomes too involved that&amp;rsquo;s not well documented. He dropped an email about fixing some SQL entries in a 2 year old word game I wrote but mentioned he wasn&amp;rsquo;t sure how to build the project.&lt;/p&gt;

&lt;p&gt;The issue was two-fold. First, there&amp;rsquo;s five different versions of the app; google, google pro, amazon, amazon pro, nook. Second, two years ago Google didn&amp;rsquo;t have tools to help with this kind of stuff. As of maybe two months ago, they finally have stable tools to help with this.&lt;/p&gt;

&lt;p&gt;I wrote a Makefile that would build all the apps and collect all the apk files into a single directory. If you&amp;rsquo;re running OSX or Linux, as most developers on our team are, then it&amp;rsquo;s trivial to build. If your running Windows, you&amp;rsquo;re shit-outta-luck.&lt;/p&gt;

&lt;p&gt;Another tangent, I found a make.exe command for windows a year back for a browser extension plugin I wrote that worked pretty well, based on the work done by the git-for-windows team.&lt;/p&gt;

&lt;p&gt;Still, me giving up scala is actually more like paying respects to Go. One thing I&amp;rsquo;ve really come to embrace with Go is being boring. Boring works. Boring is readable by people other than me. Boring is quickly buildable by people other than me.&lt;/p&gt;

&lt;p&gt;One thing I&amp;rsquo;ve been considering is the golang/mobile repo added a Dockerfile. It&amp;rsquo;s really neat, boots up ubuntu, installs build tools, android sdk, go, gradle (used in android studio to build projects), and builds your source code for you. What&amp;rsquo;s neat is now Docker is available for windows. Even bootstrapping android studio and android sdk with necessary requirements can be a pain. But saying &amp;ldquo;did you install docker.exe? great just run this file&amp;rdquo; is really boring and works. This works whether you&amp;rsquo;re a developer or not.&lt;/p&gt;

&lt;p&gt;Hell, even if I&amp;rsquo;m not writing go code, it works. It works for developers, it works for build servers, whatever.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve gone back to Java, I&amp;rsquo;m embracing the boring. I&amp;rsquo;m also typing &amp;ldquo;public static void&amp;rdquo; a lot.&lt;/p&gt;

&lt;p&gt;I like Go like I like functional programming. It&amp;rsquo;s taught me many things and it&amp;rsquo;s certainly worth review.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Email Notifications on Push</title>
      <link>http://blog.dasa.cc/post/git-email-notifications-on-push/</link>
      <pubDate>Mon, 19 Nov 2012 12:23:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/git-email-notifications-on-push/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;m doing a private collab and hosting a git repo off my server. Got annoying pretty quick with these occasional emails &amp;ldquo;hey pushed xyz change that could affect abc for you, make sure to pull the latest&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Enter this script, &lt;a href=&#34;http://git.kernel.org/?p=git/git.git;a=blob;f=contrib/hooks/post-receive-email;h=60cbab65d3f8230be3041a13fac2fd9f9b3018d5;hb=HEAD&#34;&gt;post-receive-email&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get going with it, I did the following, (line breaks for readability here):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -O &#39;/user/local/bin/post-receive-email&#39; &#39;http://git.kernel.org/?p=git/git.git;a=blob_plain;f=contrib/hooks/&#39; &#39;post-receive-email;h=60cbab65d3f8230be3041a13fac2fd9f9b3018d5;hb=HEAD&#39;

chmod a+x /usr/local/bin/post-receive-email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, link to this in your repo with &lt;code&gt;ln -s /usr/local/bin/post-receive-email hooks/post-receive&lt;/code&gt; and add something like this to config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[hooks]
    mailinglist = &amp;quot;jane@email.com, john@email.com&amp;quot;
    envelopesender = no-reply@email.com
    emailprefix = &amp;quot;[GIT] &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that will notify the mailing list of any push that occurs. There&amp;rsquo;s a number of other options worth exploring by reading the post-receive-email bash script.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sublime Text 2 and multiple cursors</title>
      <link>http://blog.dasa.cc/post/sublime-text-2-multiple-cursors/</link>
      <pubDate>Sat, 17 Nov 2012 02:18:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/sublime-text-2-multiple-cursors/</guid>
      <description>&lt;p&gt;Two days ago I started using sublime text 2 for projects. I&amp;rsquo;m coming from a long sprint of VIM usage and I have to say that sublime is pretty awesome. In fact, I&amp;rsquo;d describe sublime as VIM + awesome. Unfortunately sublime isn&amp;rsquo;t free and not to be a glory taker, but I hope to produce something on par for free in the future.&lt;/p&gt;

&lt;p&gt;One thing that really wow&amp;rsquo;d me into at least trying sublime was the proposition of multiple cursors. With that being said, this wouldn&amp;rsquo;t be my first foray into the lust for nonsensical features. But, only after a day of usage I can honestly say multiple cursors in a text editor is just a plain win.&lt;/p&gt;

&lt;p&gt;Primarily, I&amp;rsquo;ve used VIM in the past for all but the most heavily-dependent-on-IDE tasks (namely, java). I love VIM. Just the other day I opened a 6.4GB mysql dump to make some minor changes by hand before passing it on to an AWK script for conversion to postgres (yeay 16GB of system memory), but sublime is, well, simply sublime.&lt;/p&gt;

&lt;p&gt;Refactoring tools in an IDE typically consist of being scope aware and allowing you to rename method variables and class members. One thing no refactoring tool can touch though is editing multiple values at the same time. As I worked my way on the very first day through sublime on a python project, I found myself wanting to change a value set on five variables. Instead of a default value of &lt;code&gt;None&lt;/code&gt;, I wanted it to (effectively) read &lt;code&gt;kwargs.get(&#39;&#39;, None)&lt;/code&gt;, and I thought, &amp;ldquo;ok! let&amp;rsquo;s try multiple cursors!&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I moved into position and slammed &lt;code&gt;ctrl+d&lt;/code&gt; five times and there they were, five cursors ready to alter the default value of five members.&lt;/p&gt;

&lt;p&gt;Afterwards, I reflected on the wonder of how practical multiple cursors really were. &amp;ldquo;Is this just some cheap skate refactoring tool?&amp;rdquo;. No. It&amp;rsquo;s much more powerful. I think that&amp;rsquo;s one of the many reasons I&amp;rsquo;m a sublime convert now and hope to see this idea spread through free tools in the future.&lt;/p&gt;

&lt;p&gt;Thanks for reading, try sublime, hell buy sublime, and feel the preposterous range for which it defines.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xmonad</title>
      <link>http://blog.dasa.cc/post/xmonad/</link>
      <pubDate>Wed, 13 Jun 2012 13:34:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/xmonad/</guid>
      <description>&lt;p&gt;&lt;p&gt;During my lunch break yesterday, i ran across a couple comments on slashdot like &amp;ldquo;maybe emacs just works and thats why ppl are using it&amp;rdquo; and &amp;ldquo;tiling window managers are awesome&amp;rdquo;. So in my usual, screw it - lets see, i fired up emacs (not the first time) which ended pretty quick and I did some quick googling on a decent tiling window manager to try.&lt;/p&gt;&lt;p&gt;Enter xmonad, written in haskell no less (something I was going to learn after I wrap up my C# starter project, a calculator with a lexer so I can insert arbitrary words into a math equation, does proper math too, not just &amp;ldquo;eval(x)&amp;rdquo;). Anyway, within 20 minutes, I was sold. A tiling window manager is the best thing since sliced bread. Solves my window management issues I&amp;rsquo;ve been trying to fix since who knows when, things I&amp;rsquo;ve looked to for answers from desktop effects like scale, expose, overview of multiple desktops with drag and drop of windows, all that pretty flurry graphical stuff that gives you good feelings but then you rarely use.&lt;/p&gt;&lt;div&gt;Key Points: &lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Focuses on little to no need for the mouse&lt;/li&gt;&lt;li&gt;The only window decoration is a 1 px border that changes color if it&amp;rsquo;s focused, you&amp;rsquo;d be surprised how much faster programs start without decorations&lt;/li&gt;&lt;li&gt;with no decoration, dragging a window involves alt-click, which is all I do anyway so low barrier to entry for me, but floating a window is rarely needed&lt;/li&gt;&lt;li&gt;you dont minimize, you tile so no need for decoration buttons&lt;/li&gt;&lt;li&gt;alt+shift+c closes any window - this could be seen as annoying but everything centers around alt anyway so it becomes natural quick&lt;/li&gt;&lt;li&gt;Navigating between tiled windows is dead simple, I don&amp;rsquo;t lose track of what&amp;rsquo;s opened.&lt;/li&gt;&lt;li&gt;alt+space swaps to different layout arrangements (3 total by default) which handle any use case I have&lt;/li&gt;&lt;li&gt;Moving windows between virtual desktops is easy&lt;/li&gt;&lt;li&gt;Use on a multimonitor setup is where things really shine. If my first monitor is desktop 1 and my second monitor is desktop 4, I can easily swap them by selecting desktop 4 on monitor 1. No need to drag something over or anything like that.&lt;/li&gt;&lt;li&gt;I can push windows around way to easy&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I could probably type in all sorts of blurbs that might not really get the point across. If you&amp;rsquo;re bothered with window management, give xmonad a try and read up their quick guide to usage. Doesn&amp;rsquo;t take much time to get use to it.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve honestly been putting off getting another monitor for my setup, i just imagined it being a pain to use but xmonad makes me feel like a master of window management and now I&amp;rsquo;m eager to get another monitor or two.&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Web Development with Damsel for Python</title>
      <link>http://blog.dasa.cc/post/fast-web-dev-with-damsel-for-python/</link>
      <pubDate>Sun, 22 Jan 2012 04:53:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/fast-web-dev-with-damsel-for-python/</guid>
      <description>&lt;p&gt;Time feels surmountable when looking forward. In retrospect, I see surmise.&lt;/p&gt;&lt;p&gt;My title to this post feels like a real plug piece, but I guess that&#39;s what happens when you&#39;re looking to get indexed. Recently, I tagged two new versions of dmsl in git. If you&#39;ve never heard of dmsl, please go check out the README on github to see what it&#39;s all about.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dskinner/dmsl&#34;&gt;https://github.com/dskinner/dmsl&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I started off implementing haml in python which gave way to a unique direction for the project. I&#39;ve been using it quite actively in work and am continuously enamored with its simplicity and power. Of course I wrote it and there might be a sense of bias, but this isn&#39;t the first or second or third or fourth attempt I&#39;ve made to write something like this. Each of those projects were short lived in the same way that once they were mostly complete, they just flat out didn&#39;t &#34;have it&#34; for me.&lt;/p&gt;&lt;p&gt;0.3-stable is a wrap up of features and fixes over the course of many months of use and has, in the end, proven reliable. This tag is available on github. There were still some annoyances in the code related to speed and the dependency on lxml though that I badly wanted to fix.&lt;/p&gt;&lt;p&gt;The speed issue was solely in the use of a class inheriting python&#39;s Formatter to handle extensions to string substitutions. These substitutions alone could take three times as much of the time as the parser for the whole document. Granted, on a whole, this was still quite a bit faster then a number of template engines out there, but I felt this could be drastically reduced.&lt;/p&gt;&lt;p&gt;The second issue was the dependency on lxml. Simply put, I wanted that to go.&lt;/p&gt;&lt;p&gt;So recently I addressed these issues and tagged 0.4 in git. I&#39;ve also made this tag available on pypi. If installing from pypi, the only dependency is a build environment and python headers for building the C extensions. If building from github, you will need cython 0.15.1+ installed.&lt;/p&gt;&lt;p&gt;0.4 also has another change with how context variables end up in the templates sandbox. Previously, these items were packed in a kwargs dict available to templates. In 0.4, this is no longer the case and those items are unpacked in the environment for use. Planned though is the ability to revert to the old behaviour as needed for upgrading older installs.&lt;/p&gt;&lt;p&gt;While I feel the changes in 0.4 are drastic, unit tests pass and I&#39;ve upgraded my personal projects successfully to do a little stress testing while also using it in another upcoming public project with success.&lt;/p&gt;&lt;p&gt;So check it out and tell me what you think.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Line 6 UX2 and Linux</title>
      <link>http://blog.dasa.cc/post/line6-ux2-linux/</link>
      <pubDate>Wed, 24 Feb 2010 11:06:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/line6-ux2-linux/</guid>
      <description>&lt;p&gt;I originally wrote a bad/sad review about the Line 6 UX2 not working under linux as can be seen here:
&lt;a href=&#34;http://line6.com/community/thread/17663&#34;&gt;http://line6.com/community/thread/17663&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was looking to sell it recently when I decided to give it another look over and try out the drivers done for the PodXT devices by someone as can be found here:
&lt;a href=&#34;http://www.tanzband-scream.at/line6/&#34;&gt;http://www.tanzband-scream.at/line6/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The 0.8.1 release failed to compile so i checked out the trunk of the development version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn co https://line6linux.svn.sourceforge.net/svnroot/line6linux
cd line6linux/driver/trunk
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To my surprise, it worked fairly ok. My line 6 ux2 device lit up and seemed ready to go. One of the first things I noticed was that there was a constant buzzing out of the right channel monitor. This was alleviated by simply plugging my guitar in. Next, I read through the docs to get some general info. I went ahead and fired up alsamixer, increased pcm output and zero&amp;rsquo;d out the monitor. Note: the docs say to set pcm output to zero as they can be much louder then the guitar monitor. I had no trouble with this when i increased output to 75, volume was normal.&lt;/p&gt;

&lt;p&gt;So then I fired up jack and played around with a couple settings. To my surprise I was able to get latency down to 1.5 ms according to ardour (2.87 according to qjackctl)! Either way, this was much lower then I ever managed with my edirol which normally clocked in around 15ms and was littered with xruns that were very audible in the recording. Normally around 22ms I could achieve good sound with no xruns. After a short recording session, I noticed qjackctl had logged numerous xruns but I never heard a thing. Once during the recording, ardour disconnected from jack but this could be totally unrelated.&lt;/p&gt;

&lt;p&gt;This is fine news indeed and prompts me to want to hold on to this device. The bad news is I have been unable to get the microphone inputs working. I haven&amp;rsquo;t had time to look into it fully but hopefully after exploring the line6linux docs some more, I can have some success with getting this working.&lt;/p&gt;

&lt;p&gt;So all in all, this is great. What I would really like to see is Line6 spend a few resources on this project or doing something themselves. But that aside, hardware wise (i guess), this little bugger rocks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>js.js say whaa</title>
      <link>http://blog.dasa.cc/post/js-js-say-whaa/</link>
      <pubDate>Sat, 05 Dec 2009 17:19:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/js-js-say-whaa/</guid>
      <description>&lt;p&gt;whaa? oh, right. Well Ive dug in deep to javascript. Well sorta, and it was all in an effort to evaluate whether to use prototype.js or mootools. My choice? neither. Instead I&amp;rsquo;ll focus my energy on expanding the default object in my js.js file. I know, its totally unoriginal. But lets face the facts, its 488 bytes.&lt;/p&gt;

&lt;p&gt;And hot damn its amazing what 488 bytes can do. You can check it out here:
&lt;a href=&#34;https://github.com/dskinner/js.js&#34;&gt;https://github.com/dskinner/js.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ive placed it in the public domain and what not. I think the focus will be mostly on custom constructors and lettings prototype() paste it all together. And of course, it can just be a staging ground for continued explicit prototypal declaration. It just uses whats there, and thats pretty sweet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A New Way to Prototype with Javascript</title>
      <link>http://blog.dasa.cc/post/new-way-to-prototype-with-javascript/</link>
      <pubDate>Sat, 05 Dec 2009 14:17:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/new-way-to-prototype-with-javascript/</guid>
      <description>&lt;p&gt;Ive been doing alot of reading. One place that I keep happening upon is Crockford&amp;rsquo;s javascript pages. I dont reallly know who that is, but I&amp;rsquo;ve occasionally read he&amp;rsquo;s some sort of javascript legend. Well, I was looking over one of his pages, describing instantiating new objects, specifically:
&lt;a href=&#34;http://javascript.crockford.com/prototypal.html&#34;&gt;http://javascript.crockford.com/prototypal.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He talked about prototypal behavior, how it should work, and his simple function for doing so. Effectively, creating a blank function definition and then setting its prototype to the passed in object. I suddenly realized something. Ive been going about it all wrong with this class() business. Furthermore, what I had in place was his function but on steroids. Instead of initializing a blank function, I have what i was considering a sort of meta object that links to magic methods. And instead of setting the prototype to the object passed in, I set it to the all the objects passed in. So I took this thought and made some minor changes to the code, including being able to pass in objects, not just functions. Now I can write stuff like this,&lt;/p&gt;

&lt;pre&gt;x = {get: function() { return this.url; }};

function y() {
    this.get_url = function() {
        return x.get.call(this);
    }
};

var super_object = prototype(y, x);&lt;/pre&gt;

&lt;p&gt;and now super_object has the methods of y and x, where the order of the arguments decides precedence of inheritance. So I can create a new instance by&lt;/p&gt;

&lt;pre&gt;var a = new super_object({url: &#39;/test/this&#39;});
a.get_url() // returns &#39;/test/this&#39;
a.get() // returns &#39;/test/this&#39;&lt;/pre&gt;

&lt;p&gt;There some behind the scenes action here. What I did was abstract out the meta object with the intention of overriding it. But on some more thought, I think I will simply make it explicit, this way one could define any number of meta objects with their own magic methods, or if it so fits, simply pass in a blank function() {}, following Crockford&amp;rsquo;s lead. So it would look more like&lt;/p&gt;

&lt;pre&gt;var super_object = prototype(y, x, meta); // or whatever you call your meta, or
var super_object = prototype(y, x, function(){}); // for no magic methods or special constructors&lt;/pre&gt;

&lt;p&gt;Speaking on speed, Its important to note that there are no call&amp;rsquo;s or apply&amp;rsquo;s ever, though thats not to say one couldn&amp;rsquo;t write it into a custom meta object. Point being, it runs fast, just as fast as typing it all out manually. It doesn&amp;rsquo;t strive to be &amp;ldquo;classical&amp;rdquo; in any way. It simply focuses on custom constructors for multiple objects and a simple way to combine multiple objects, given order of precedence of arguments. It could be just as easily used in conjunction with explicit prototypal declarations. Seems like a win-win for keeping it simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;*** Edit ***&lt;/strong&gt; I forgot to mention, in the above example, x is an object that super_object inherited, but say you override x&amp;rsquo;s method and then needed to call it? well its a good bit shorter since its already an object, simply&lt;/p&gt;

&lt;p&gt;x.get.call(this)&lt;/p&gt;

&lt;p&gt;No need for specifying the prototype. I think this could easily become a simple design paradigm I might follow, Ill need more experience to judge properly though&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript&#39;s not all bad</title>
      <link>http://blog.dasa.cc/post/javascripts-not-all-bad/</link>
      <pubDate>Sat, 05 Dec 2009 08:18:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/javascripts-not-all-bad/</guid>
      <description>&lt;p&gt;I gotta admit, through all the frustration and experimentation ive gone through with the language recently, its not so bad. At first I thought, &amp;ldquo;expressive? no way&amp;rdquo; b/c it seems like when you go to be expressive, you crop up with irreparable errors that eventually force you into one &amp;ldquo;expression&amp;rdquo;. Frustration follows each step, as is learning for me, yet I carry on.&lt;/p&gt;

&lt;p&gt;Now Im feeling the chains loosened. Not so much do I feel tied to a particular paradigm when writing out bits of javascript, particularly, paradigms that Ive brought over from projects Ive worked on in python. Im looking at new ways to do things in javascript, in particular I was pretty happy to see getters and setters in javascript 1.5, Ive always enjoyed them for a couple reasons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getters and Setters provide a consistent API&lt;/strong&gt;
Alot of times, we find ourselves writing utilities and libraries of utilities to perform particular actions. When using these libraries (or someone else&amp;rsquo;s for that matter), its important to have a consistent API so one can think about the task at hand, not the details of the API. If you have a series of attributes on an object, but some of them might be dependent on others, getters and setters might prove useful for consistency in accessing object properties. If you have the following properties, parent, children, x, y, w, h, batch, visible, well keeping in mind to call get_parent() or batch() or whatever while calling .w and .visible for others really blows. All I can say is that I hope theres auto generated documentation to keep at hand, which will be a pain if theres long time periods in between using the library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getters and Setters provide a mechanism for error checking&lt;/strong&gt;
Another use I&amp;rsquo;ve found for getters and setters is error checking. It provides a centralized point to assert the value is something valid before getting or setting. So say I have&lt;/p&gt;

&lt;p&gt;widget.x = input&lt;/p&gt;

&lt;p&gt;Theres alot of places I could check input, but if Im getting input and setting x from different scenarios that crop up, being able to check it with a setter on x would consolidate alot of code.&lt;/p&gt;

&lt;p&gt;Anyway, having access to getters and setters in javascript will be useful to say the least. Embracing the functional style of javascript looks like a win-win situation. Unlike others, I have no gripes with calling object.prototype.method.call(this) but even that is probably unnecessary in alot of situations, trying to fit a bull with a shoehorn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whats wrong with javascript prototype?</title>
      <link>http://blog.dasa.cc/post/whats-wrong-with-javascript-prototype/</link>
      <pubDate>Fri, 04 Dec 2009 17:31:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/whats-wrong-with-javascript-prototype/</guid>
      <description>&lt;p&gt;&lt;strong&gt;** Edit **&lt;/strong&gt;You can see my current approach to these frustrations here: &lt;a href=&#34;https://github.com/dskinner/js.js&#34;&gt;https://github.com/dskinner/js.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O thats easy, ok lets write up a base object we&amp;rsquo;ll want to inherit from (note, I would not actually write a this.get_name to retrieve a this.name, duh, its all in the spirit of an easy read)&lt;/p&gt;

&lt;pre&gt;function A(name, age) {
  this.name = name;
  this.age = age;
  this.get_name = function() { return this.name; }
  this.get_age = function() { return this.age; }
}&lt;/pre&gt;

&lt;p&gt;Good, ready? oh shit, wait a sec, according to MDC we were being naive. Now the only way to call the get_name and get_age functions is with an instance of A. Well crap, that doesn&amp;rsquo;t help inheritance much, prototypal or not. Alright so lets do this right.&lt;/p&gt;

&lt;pre&gt;function A(name, age) {
  this.age = age;
  this.name = name;
}
A.prototype = {
  get_age: function() { return this.age; },
  get_name: function() { return this.name; }
}&lt;/pre&gt;

&lt;p&gt;Yeay, yippie for us, now lets extend A with B&lt;/p&gt;

&lt;pre&gt;function B() {};
B.prototype = new A;&lt;/pre&gt;

&lt;p&gt;Yeay, yippie, now lets make C with an extra param and function and extend A.&lt;/p&gt;

&lt;pre&gt;function C(name, age, title, money) {
  this.title = title;
  this.money = money;
};
C.prototype = new A;
C.prototype = {
  get_title: function() { return this.title; },
  get_money: function() { return this.money; }
}&lt;/pre&gt;

&lt;p&gt;Good? alright lets.. o crap! it doesn&amp;rsquo;t work. Right, right, thats right, I totally erased the A prototype by using the prototype = {} syntax, ok so that syntax is no good for working with inheritance unless its the top level thing, but crap, i dont wanna think about that. Whatever, lets just fix C for now though readability will be a little funky, hey .. i know! lets just say if i use the prototype = {}; syntax, thats a way to differentiate it as a top level parent! yeah! thats great justification &lt;em&gt;cough*not*cough&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;anyway&lt;/p&gt;

&lt;pre&gt;function C(name, age, title, money) {
  this.title = title;
  this.money = money;
};
C.prototype = new A;
C.prototype.get_title = function() { return this.title; }
C.prototype.get_money = function() { return this.money; }&lt;/pre&gt;

&lt;p&gt;ok, lets fire this bad boy up and test C.. Where the hell is my name? and age!? son of a.., I see, so i need to manually call the constructor of the same damn thing that I C.prototype=&amp;rsquo;d&lt;/p&gt;

&lt;p&gt;alright, its cool, lets fix it, I can dig it. Lets add that A.call&lt;/p&gt;

&lt;pre&gt;function C(name, age, title, money) {
  A.call(this, name, age);
  this.title = title;
  this.money = money;
};
C.prototype = new A;
C.prototype.get_title = function() { return this.title; }
C.prototype.get_money = function() { return this.money; }&lt;/pre&gt;

&lt;p&gt;Sweet buttery buttons! It works! wait a sec.. why is this code running slower then before? Yeah yeah, theres creating the name and age now that wasn&amp;rsquo;t before but its more&amp;hellip; its .call() ! Wth?! why is this causing it to go slower? Alright alright, its cool, lets just&amp;hellip; migrate these object property inits out of the contructor and into a prototype function that will handle the needs of all that inherit it since its mostly the same.&lt;/p&gt;

&lt;p&gt;Ah hell, im hungry, maybe another day..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Javascript Class with magic methods</title>
      <link>http://blog.dasa.cc/post/javascript-class-with-magic-methods/</link>
      <pubDate>Fri, 04 Dec 2009 12:07:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/javascript-class-with-magic-methods/</guid>
      <description>&lt;p&gt;Hey, ok so this is what i have so far, totally preliminary&lt;/p&gt;

&lt;pre&gt;function class() {
    var that = function() {
        this.__init__(arguments[0]);
    };
    that.prototype = new object;

    for (var x=arguments.length-1; x&amp;gt;=0; --x) {
        var m = new arguments[x];
        for (var i in m) { that.prototype[i] = m[i]; }
    }
    this[arguments[0].name] = that;
}

function object() {
    this.__init__ = function(kwargs) {
        for (var k in kwargs) {
            this[k] = kwargs[k];
        }
    }
}&lt;/pre&gt;

&lt;p&gt;Short, right?&lt;/p&gt;

&lt;p&gt;Then I can write something like this,&lt;/p&gt;

&lt;pre&gt;class(A, object)
function A() {
    this.get_name = function() {
        return this.name;
    }
}

class(B, A)
function B() {
    this.get_age = function() {
        return this.age;
    }
}

class(C, object)
function C() {
    this.__init__ = function() {
        this.name = &#34;OVERRIDE&#34;;
    }
}


var a = new A({name: &#34;Daniel&#34;, age: &#34;24&#34;});
var b = new B({name: &#34;David&#34;, age: &#34;25&#34;});
var c = new C({name: &#34;John&#34;, age: &#34;26&#34;});&lt;/pre&gt;

&lt;p&gt;effectively just sticking a little header over normal javascript functions, and everything works as one would expect.&lt;/p&gt;

&lt;p&gt;a.name // returns Daniel
a.age // returns 24
b.get_age() // returns 25
b.get_name() // returns David
c.name // returns OVERRIDE&lt;/p&gt;

&lt;p&gt;And to boot, it executes at the same speed as writing it the &amp;ldquo;native&amp;rdquo; way. Here&amp;rsquo;s what i have for &amp;ldquo;native&amp;rdquo; (im a noob so correct any errors)&lt;/p&gt;

&lt;pre&gt;function object() {}
object.prototype.init = function(kwargs) {
    for (var k in kwargs) {
        this[k] = kwargs[k];
    }
}

function A(kwargs) {
    this.init(kwargs);
}
A.prototype = new object;
A.prototype.get_name = function() {
    return this.name;
}

function B(kwargs) {
    this.init(kwargs);
}
B.prototype = new A;
B.prototype.get_age = function() {
    return this.age;
}

function C() {
    this.name = &#34;OVERRIDE&#34;;
}&lt;/pre&gt;

&lt;p&gt;I ran a test importing each implementation, respectively, and got similar results in execution speed and memory size. I created 100,000 thousand objects of each A, B, C and each method occupied 78mb according to top, and each method consistently ran between 2100-2300 ms with variance that occasionally hit 3000 ms. Ultimately its not surprising as all the class function i wrote does is auto write how you would do it natively. What Im surprised about is theres no extra cruft when the javascript runtime compiler handles it. I never intended this to be useful, it was all part of an experiment delving into javascript scope and messing with constructors so i could evaluate the use of a library like prototype.js or mootools.&lt;/p&gt;

&lt;p&gt;But hell, so far this little bit of code is turning out to be fairly useful. I imagine if i write more magic methods, the memory size will increase by a small amount. I half expected to see a difference in memory since the C is much more stripped down in &amp;ldquo;native&amp;rdquo; version vs the version with &lt;strong&gt;init&lt;/strong&gt; cruft from object function.&lt;/p&gt;

&lt;p&gt;This has all been using spidermonkey-bin (smjs) so now im curious to see how other javascript implementations handle the details, as from the get-go i expected a huge increase in memory (not that I know anything about anything) from functions existing in the constructor and then being linked to a prototype, and all those &amp;ldquo;new&amp;rdquo; instances called in class. But it all seems negligible, in spidermonkey anyway. This could be a totally different story in IE, lol&lt;/p&gt;

&lt;p&gt;for reference, heres my lame-o profile code (i know, i know, but it was enough to find all sorts of issues when exploring javascript scope and constructors)&lt;/p&gt;

&lt;pre&gt;var date1 = new Date(); 
var milliseconds1 = date1.getTime(); 

load(&#39;custom.js&#39;); // point this to which script to test
var l = [];
for (var j = 0; j &amp;lt; 100000; ++j) {
    l.push(new A({name: &amp;quot;Daniel&amp;quot;, age: &amp;quot;24&amp;quot;}));
    l.push(new B({name: &amp;quot;David&amp;quot;, age: &amp;quot;25&amp;quot;}));
    l.push(new C({name: &amp;quot;John&amp;quot;, age: &amp;quot;26&amp;quot;}));
}

var date2 = new Date(); 
var milliseconds2 = date2.getTime(); 

var difference = milliseconds2 - milliseconds1;
print(l.length)
print(difference)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Also, function object needs a class(object) so you can call its magic methods, so in C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.__init__ = function(kwargs) { object.prototype.__init__.call(this, kwargs) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of which, im a little confused, b/c I originally expected to not work. Anytime a Class(X) is called, its constructor gets replaced, so another Class(X) later on will be referring to that replaced class which i thought would cause some kind of error, or so i would think. So deep inheritance might cause some bad mojo with the amount of memory or hell if i know. I haven&amp;rsquo;t looked into that yet&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT 2&lt;/strong&gt; Also, im not sure how much of a &amp;ldquo;class&amp;rdquo; this is really, if it turns out useful i may find a different name, maybe just call it &amp;ldquo;prototype&amp;rdquo; so like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prototype(A, object)
function A() {};
var a = new A({name: &amp;quot;daniel&amp;quot;});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Baffling Results from my Javascript Class(-ishness)</title>
      <link>http://blog.dasa.cc/post/baffling-results-from-my-javascript/</link>
      <pubDate>Fri, 04 Dec 2009 08:14:00 -0400</pubDate>
      
      <guid>http://blog.dasa.cc/post/baffling-results-from-my-javascript/</guid>
      <description>&lt;p&gt;** Edit, regarding the following, I suddenly realized what the problem was, .call is slow and was used in the &amp;ldquo;native&amp;rdquo; approach. Nevertheless Ive had positive result following through on multiple inheritence and magic methods. refer here, &lt;a href=&#34;http://wp.me/piHZk-14&#34;&gt;http://wp.me/piHZk-14&lt;/a&gt; **&lt;/p&gt;

&lt;p&gt;Ok, So recently I&amp;rsquo;ve taken an interest in javascript. By interest I mean taking it more seriously as a language. One of the first things I wanted to do was to see if I should adopt a framework like mootools to allow for classical inheritance type of stuff or if I should develop using the prototypal javascript inheritance. This lead me to really dig in deep to javascript scope and all of its nuances, especially considering prototype.&lt;/p&gt;

&lt;p&gt;Along the way, pecking away at my smjs console (aptitude install spidermonkey-bin), I eventually wrote this function class() {} as I was trying to see what I could get away with in poking at the scope of functions and their prototypes. I was particularly annoyed with a seperation between the constructor and that which was prototyped and the foresight required, which Im going to lack since Im new to the game. Anyway, heres the function,&lt;/p&gt;

&lt;pre&gt;function class() {
    var that = arguments[0];
    for (var x=arguments.length-1; x&amp;gt;=0; --x) {
        m = new arguments[x];
        for (var i in m) { that.prototype[i] = m[i]; }
    }
}&lt;/pre&gt;

&lt;p&gt;effectively, this allowed me to write my prototypes in the constructor as well as extend functions. It was all in the name of learning and I wasn&amp;rsquo;t considering it practical. So basically I wrote stuff like&lt;/p&gt;

&lt;pre&gt;function object() {
    this.init = function(kwargs) {
        for (var k in kwargs) {
            this[k] = kwargs[k];
        }
    }
}

class(A, object)
function A(kwargs) {
    this.init(kwargs);
}

var a = new A({name: &#34;Daniel&#34;, age: &#34;24&#34;});&lt;/pre&gt;

&lt;p&gt;I was also playing around with object constructors (unsuccessfully) curious as to if i could implement magic methods that could be inherited and run automatically, but yeah, that went no where so i was all but about to abandon this whole excursion when I decided, before I do, I wonder how much more memory my function class() {} uses and how much slower it is from doing it the standard way. By standard, I mean what I basically learned from perusing the net and from MDC javascript 1.5 Engineering Model Example. Heres what I have for the &amp;ldquo;standard&amp;rdquo; way&lt;/p&gt;

&lt;pre&gt;function object() {}
object.prototype.init = function(kwargs) {
    for (var k in kwargs) {
        this[k] = kwargs[k];
    }
}

function A(kwargs) {
    object.prototype.init.call(this, kwargs);
}

var a = new A({name: &#34;Daniel&#34;, age: &#34;24&#34;});&lt;/pre&gt;

&lt;p&gt;Now my profiling isn&amp;rsquo;t very scientific I suppose, I used top and timed the execution from within javascript, but the results are consistent. What I basically did was this&lt;/p&gt;

&lt;pre&gt;var date1 = new Date(); 
var milliseconds1 = date1.getTime(); 

load(&#39;test2.js&#39;);
var l = [];
for (var j = 0; j &amp;lt; 5000; ++j) {
    l.push(new A({name: &amp;quot;Daniel&amp;quot;, age: &amp;quot;24&amp;quot;}));
}

var date2 = new Date(); 
var milliseconds2 = date2.getTime(); 

var difference = milliseconds2 - milliseconds1;
print(l.length)
print(difference)&lt;/pre&gt;

&lt;p&gt;where load(&amp;lsquo;test2.js&amp;rsquo;) was the &amp;ldquo;standard&amp;rdquo; way and load(&amp;lsquo;test4.js&amp;rsquo;) in a seperate file was my way. The first thing that caught me off guard was that memory consumption was the exact same. I was half expecting my method to take more memory b/c the function definations existed in two places, but I guess the javascript runtime compiler doesn&amp;rsquo;t cause this to happen, so yippie freaggin do da. Now what left me baffled was that my way was consistently faster then the standard way. Here are the time results, running 10 in a row&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all times are in milliseconds
=== Standard ===
54
58
49
55
55
53
53
49
53
52&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=== My Way ===
42
41
42
45
45
42
42
48
48
48&lt;/p&gt;

&lt;p&gt;The numbers were close, so then i decided to increase the number of objects created to perhaps provide a more significant and visible difference. So I increased the number of objects from 5,000 to 500,000.&lt;/p&gt;

&lt;p&gt;=== My Way ===
5716
4257
4229
4331&lt;/p&gt;

&lt;p&gt;=== Standard Way ===
7601
4866
4913
5564&lt;/p&gt;

&lt;p&gt;Its as if the javascript compiler runs faster instantiating an object property and linking it to a prototype then it does when just instantiating a prototype property. And it doesn&amp;rsquo;t require any extra headway in memory to do it.&lt;/p&gt;

&lt;p&gt;If theres any javascript ninja&amp;rsquo;s that can explain whats going on, thatd be simply awesome. Speaking of which, im gonna go find mailing list now&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Motionbuilder from AutoDesk and OpenCV in Harmony</title>
      <link>http://blog.dasa.cc/post/motionbuilder-opencv-in-harmony/</link>
      <pubDate>Fri, 14 Nov 2008 23:43:00 -0500</pubDate>
      
      <guid>http://blog.dasa.cc/post/motionbuilder-opencv-in-harmony/</guid>
      <description>&lt;p&gt;For anyone ever curious, recently I have delved into the world of motion capture, image recognition and the likes for the past week. The task, build a headset with a mounted usb camera that tracks the eye and moves it accordingly to a model in motionbuilder. Just to get this out there, I know nothing about 3D art, modelling or anything of the likes, including motionbuilder. This would be the first time I&amp;rsquo;ve ever even used the software.&lt;/p&gt;

&lt;p&gt;That aside, I asked someone for a model with a moveable eye and what i got was basically a head with the eyes fixed to a null point. when the point moves, the eyes move. So next was to get the data I had been receiving from opencv to motionbuilder. Just to clarify, currently I am simply using a default haarcascade for face detection so as to track something with motion on the screen. Im taking the center point of the face and using it as proof of concept to move the null. Books are expected Monday so i can delve into tracking the pupil.&lt;/p&gt;

&lt;p&gt;The thing about motionbuilder though is its python implementation is hooorrible. As in the worst of the worst. If i were to say its barely usable, i might be hitting the head on the nail for some, but it still feels like a bit of an overstatement. That said, its still great that it has python support so kudos for someone atleast trying to implement it. Im sure its a daunting task for the type of project.&lt;/p&gt;

&lt;p&gt;Let me briefly describe the limitations for any that might be unfamiliar. For one, the python version used is 2.4.1 and it comes with pyfbsdk library and nothing else. Considering the lack of documentation for the python module, i would typically resort to something like,&lt;/p&gt;

&lt;pre&gt;
import inspect
for x in inspect.getmembers(FBSystem().Scene):
    print x
&lt;/pre&gt;

&lt;p&gt;but as i said no libraries. So the first thing i did was go to the python site and download 2.4.1. Its not actually listed there but just click on whatever the latest 2.4.x is and then change the revision number to 2.4.1 in your address bar. Download, install, then copy over from your c:\python24\Lib directory all the .py&amp;rsquo;s to your program\ files\autodesk\python\lib folder. Now you can you do some basic stuff like inspect.getmembers. Secondly, the python console in motionbuilder is horrid. You can type in no more than one line at a time. Syntax error&amp;rsquo;s have crashed the console. I cant up-arrow to previous commands. The output is limited to whatever the last command was that you ran, aaaaand the text of the output isn&amp;rsquo;t selectable. So that means no copy and paste of all the methods of whatever after you inspect.getmembers&amp;hellip; aaargh! I still have the screenshot on my desktop somewhere &amp;hellip;&lt;/p&gt;

&lt;p&gt;But fear not! b/c there is telnet. From the python console from within motionbuilder, there is a tab that lets you enable telnet. So you can open up a telnet client and go to addy 127.0.0.1 port 4242 and hopefully you should be presented with a python console. I say hopefully b/c i didn&amp;rsquo;t have the best of luck the first few times b/c of motionbuilder (and/or my own) quirkiness.&lt;/p&gt;

&lt;p&gt;And finally, the real bugger in it all is that if you write a python script that takes some time to run, all of motionbuilder locks until the script is finished. So this means no script thats running in the background waiting to receive data. Instead, this data needs to be sent via the telnet link to motionbuilder. I found some great resources, but mainly ill list this particular one,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chrisevans3d.com/tutorials/mbui.htm&#34;&gt;http://chrisevans3d.com/tutorials/mbui.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He&amp;rsquo;s got some great sample code for integrating a seperate wxpython script into motionbuilder and breaks down a number of things as well. Unfortunately, his code for making use of telnetlib from within a seperate python instance to issue commands to motionbuilder didn&amp;rsquo;t work out so hot, which is precisely what prompted me to write about this. The code he had listed seemed a bit cryptic with these read_until&amp;rsquo;s with params of 0.1 and 0.01, and i didn&amp;rsquo;t see anything of the sort mentioned in python docs (barely looking of course) so I wrote my class for doing this and saved it in a mbpipe.py and it reads as follows&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import telnetlib

class MBPipeline:
    def __init__(self, host=&amp;quot;127.0.0.1&amp;quot;, port=&amp;quot;4242&amp;quot;):
        self.tn = telnetlib.Telnet(host, port)
        self.tn.read_until(&#39;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt; &#39;)

    def call(self, command):
        self.tn.write(command + &#39;\n&#39;)
        r = self.tn.read_until(&#39;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt; &#39;)[:-6]
        try:
            return eval(r)
        except:
            return str(r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now from my script where i am doing opencv stuff (or simply from your console) I can do a
&lt;pre&gt;from mbpipe import MBPipeline
mb = MBPipeline()
mb.call(&amp;lsquo;FBSystem().Scene.Components[216].PropertyList.Find(&amp;ldquo;Lcl Translation&amp;rdquo;)&amp;lsquo;)&lt;/pre&gt;
and what it returns is the actual tuple from motionbuilder. In any case where the string from the telnet session can be eval&amp;rsquo;d, you&amp;rsquo;ll receive the object. Otherwise just the string.&lt;/p&gt;

&lt;p&gt;Just thought I&amp;rsquo;d share. :D&lt;/p&gt;

&lt;p&gt;I may comment later on my experiences with opencv, which so far have been great. QueryFrame, haarcascade, convert to image and push over to pyglet and render to screen my live video (note, opencv has its own windowing and controls which most will probably find useful).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandora minus the cruft with XUL</title>
      <link>http://blog.dasa.cc/post/pandora-minus-the-cruft-with-xul/</link>
      <pubDate>Thu, 06 Nov 2008 11:00:00 -0500</pubDate>
      
      <guid>http://blog.dasa.cc/post/pandora-minus-the-cruft-with-xul/</guid>
      <description>&lt;p&gt;I made this a while back then found out a couple months ago that pandora has a ?cmd=mini getvar that shows a smaller player. So I updated this xul package I made. Im no expert or even novice in xul. Very basic stuff is all I&amp;rsquo;ve cared to do, but i figured this was a great way to use the service minus the cruft and get it out of my browser. Google Chrome&amp;rsquo;s save as application is great too if your on windows.&lt;/p&gt;

&lt;p&gt;Pandora via XUL can be downloaded from this link: &lt;a href=&#34;http://dasacc22.googlepages.com/pandora.tar.gz&#34;&gt;http://dasacc22.googlepages.com/pandora.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should work on any platform with xulrunner. You can run it from linux by&lt;/p&gt;

&lt;p&gt;$&amp;gt; xulrunner application.ini&lt;/p&gt;

&lt;p&gt;in the folder, similarly on other platforms. Ive also created a sh shortcut in the folder that runs&lt;/p&gt;

&lt;p&gt;$&amp;gt; nohup xulrunner application.ini &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;

&lt;p&gt;to background the service. When starting from the shortcut, click &amp;ldquo;run&amp;rdquo; to start it. I have adobe flash complain on startup saying it prevented something dangerious from happening, i guess b/c the flash object is embedded in XUL?? And that it shutdown the offending application. Just click ok and it runs just fine. No need to click settings like it prompts you to (it doesn&amp;rsquo;t seem to launch settings anyway).&lt;/p&gt;

&lt;p&gt;If the ?cmd=mini ever dissappears you can just update the xul package by opening chrome/content/main.xul and replacing the embed object with the one from the site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IBM Sliding Puzzle Contest</title>
      <link>http://blog.dasa.cc/post/ibm-sliding-puzzle-contest/</link>
      <pubDate>Thu, 23 Oct 2008 16:54:00 -0500</pubDate>
      
      <guid>http://blog.dasa.cc/post/ibm-sliding-puzzle-contest/</guid>
      <description>&lt;p&gt;So someone passed onto me a pdf for an IBM sliding puzzle contest. Basically, it consists of a 3 row by 3 column puzzle with one empty space, you know the ones, and you have to write a piece of software that solves for the answer. The instructional pdf suggests that while its acceptable for your answer to be over 20 moves, it should optimally be about 20 or less and be relatively quick.&lt;/p&gt;

&lt;p&gt;At first I had no clue about how to do something like this but found the idea very interesting. Four hours later I had a python script that solves for all possible solutions up to how ever many moves you choose it too. Turns out the shortest answer is 12 moves, according to my script. I haven&amp;rsquo;t validated the 12 move answer, but i did validate a 14 move answer by hand with success (which was actually a twelve move answer with a repeat move making it 14), and i see little reason for the 12 move answer to be wrong.&lt;/p&gt;

&lt;p&gt;Anyway, here it is in all its glory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;puzzle = [&#39;0&#39;, &#39;4&#39;, &#39;2&#39;, &#39;5&#39;, &#39;8&#39;, &#39;3&#39;, &#39;1&#39;, &#39;7&#39;, &#39;6&#39;]

answers = []

possible_moves = [
    [lambda p: swap(p, 1, 0), lambda p: swap(p, 3, 0)],
    [lambda p: swap(p, 0, 1), lambda p: swap(p, 2, 1), lambda p: swap(p, 4, 1)],
    [lambda p: swap(p, 1, 2), lambda p: swap(p, 5, 2)],
    [lambda p: swap(p, 0, 3), lambda p: swap(p, 4, 3), lambda p: swap(p, 6, 3)],
    [lambda p: swap(p, 1, 4), lambda p: swap(p, 3, 4), lambda p: swap(p, 5, 4), lambda p: swap(p, 7, 4)],
    [lambda p: swap(p, 2, 5), lambda p: swap(p, 4, 5), lambda p: swap(p, 8, 5)],
    [lambda p: swap(p, 3, 6), lambda p: swap(p, 7, 6)],
    [lambda p: swap(p, 4, 7), lambda p: swap(p, 6, 7), lambda p: swap(p, 8, 7)],
    [lambda p: swap(p, 5, 8), lambda p: swap(p, 7, 8)]
]

def serialize(p):
    return &#39;&#39;.join(p)

def swap(L, m, t):
    if L[t] is &#39;0&#39;:
        L[t] = L[m]
        L[m] = &#39;0&#39;
        return serialize(L)
    
def no_dups(S):
    if len(S.split(&amp;quot;-&amp;quot;)) != len(set(S.split(&amp;quot;-&amp;quot;))):
        return False
    else:
        return True

def search(tree, index=0):
    if index &amp;amp;lt; 12:
        for each in tree:
            for i, val in enumerate(list(each.split(&amp;quot;-&amp;quot;)[-1])):
                if val is &#39;0&#39;:
                    generation = []
                    for move in possible_moves[i]:
                        result = each+&amp;quot;-&amp;quot;+move(list(each.split(&amp;quot;-&amp;quot;)[-1]))
                        if &amp;quot;123456780&amp;quot; in result:
                            answers.append(result)
                        elif no_dups(result):
                            generation.append(result)
                    search(generation, index+1)

search([&amp;quot;-&amp;quot;+serialize(puzzle)])
shortest_answer = sorted(answers)[0]
print &amp;quot;==========&amp;quot;
print &amp;quot;Shortest Answer: &amp;quot; + str(len(shortest_answer.split(&amp;quot;-&amp;quot;))-2) + &amp;quot; Moves&amp;quot;
print &amp;quot;++++++++++&amp;quot;
print shortest_answer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit: I just thought i would add,
yeah so the thing that was the turning point for solving this thing was how you look at solving the puzzle. Ive always looked at those puzzles as, ok what can i move into the empty space and rotate these pieces around and this and that but thats totally the wrong viewpoint. The way to visualize solving the answer is to look at the empty space as your focus and to move the empty space around, pushing the other numbers around into place. The puzzle suddenly becomes eaiser to solve by hand on your own and thats how the program solves for the answer too, by moving the empty space around, not trying to calculate how to get a particular number to its destination&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>